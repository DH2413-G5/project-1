using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class Swimmer_update : MonoBehaviour
{
    
   [Header("Values")]
    [Tooltip("Determines the speed at which the player swims though the environment.")]
    [SerializeField] private float swimForce = 2f;
    [Tooltip("Determines the drag force of the water, slowing down the player.")]
    [SerializeField] private float dragForce = 1f;
    [Tooltip("Minimum force needed for the player to start swimming.")]
    [SerializeField] private float minForce;
    [Tooltip("Limits the amount of strokes per second.")]
    [SerializeField] private float minTimeBetweenStrokes;
    
    [Header("References")]
    [SerializeField] private InputActionReference leftControllerVelocity;
    [SerializeField] private InputActionReference rightControllerVelocity;
    [Tooltip("Determines which reference to use to apply the velocity to.")]
    [SerializeField] private Transform trackingReference; // I.e. direction where the head or hands point.
    
    private Rigidbody _rigidbody;
    // Helps calculate time between strokes.
    private float _cooldownTimer;

    
    private void Awake() {
        // Caching the rigidbody.
        _rigidbody = GetComponent<Rigidbody>();
        // Turn off gravity for a floating/swimming effect.
        _rigidbody.useGravity = false;
        // Prevent rotations of the rigidbody to combat motion sickness.
        _rigidbody.constraints = RigidbodyConstraints.FreezeRotation;
    }


    private void FixedUpdate() {
        
        // Check if player should swim forward
        _cooldownTimer += Time.fixedDeltaTime;

        if (_cooldownTimer > minTimeBetweenStrokes) {
            // Calculate the total velocity generated by both hands.
            var leftHandVelocity = leftControllerVelocity.action.ReadValue<Vector3>();
            var rightHandVelocity = rightControllerVelocity.action.ReadValue<Vector3>();
            Vector3 localVelocity = leftHandVelocity + rightHandVelocity;
            // Inverting velocity: moving forward by pulling backwards.
            localVelocity *= -1;

            // Using .sqrMagnitude for performance. To get the .magnitude, Unity has to do a sqrt operation. 
            if (localVelocity.sqrMagnitude > minForce * minForce) {
                // Calculating the world velocity and apply it to the rigidbody
                Vector3 worldVelocity = trackingReference.TransformDirection(localVelocity);
                _rigidbody.AddForce(worldVelocity * swimForce, ForceMode.Acceleration);
                // Resetting cooldown for strokes
                _cooldownTimer = 0f;
            }
        }

        // Apply water drag force if player is moving
        if (_rigidbody.velocity.sqrMagnitude > 0.01f) {
            _rigidbody.AddForce(-_rigidbody.velocity * dragForce, ForceMode.Acceleration);
        }
    }
}